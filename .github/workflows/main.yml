name: create new branch

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: checkout master
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Create new Branch
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          git init
          git config --global user.email "ci@example.com"
          git config --global user.name "CI Action"
          git rm --cached -r * 
          if [[ ! -f .gitignore ]]; then
            # Make sure .gitignore exists
            touch .gitignore
          fi
          if ! grep -q .ci-tools .gitignore; then
            # Add .ci-tools to .gitignore
            echo "src" >> .gitignore
            echo ".editorconfig" >> .gitignore
            echo ".travis.yml" >> .gitignore
            echo ".gitignore" >> .gitignore
            echo ".babelrc" >> .gitignore
            echo "./images" >> .gitignore
            echo "webpack.config.js" >> .gitignore
            echo "bin" >> .gitignore
            echo "gulpfile.js" >> .gitignore
            echo ".prettierignore" >> .gitignore
            echo "config.js" >> .gitignore
            echo "node_modules" >> .gitignore
            echo "content" >> .gitignore
            echo "package.json" >> .gitignore
            echo "svgpack" >> .gitignore
            echo ".prettierignore" >> .gitignore
            echo "tmp" >> .gitignore
            echo ".prettierignore" >> .gitignore
            echo "config.toml" >> .gitignore
            echo "yarn.lock" >> .gitignore
            echo "renovate.json" >> .gitignore
            echo ".prettierrc" >> .gitignore
            echo "!/exampleSite/config.toml" >> .gitignore
            echo "!/exampleSite/content" >> .gitignore
            echo "!/exampleSite/static" >> .gitignore
          fi
          git add .
          git checkout -b release
          git commit -m "Deploy from Github Actions"
          git push --force origin release
